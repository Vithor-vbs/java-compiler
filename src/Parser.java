
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Tokens.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\024\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\006\000\002\003\011\000\002\003\007" +
    "\000\002\003\005\000\002\003\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\061\000\014\014\007\017\012\021\011\022\005\031" +
    "\004\001\002\000\004\011\061\001\002\000\012\012\020" +
    "\027\015\030\016\031\014\001\002\000\016\002\056\014" +
    "\007\017\012\021\011\022\005\031\004\001\002\000\014" +
    "\014\007\017\012\021\011\022\005\031\004\001\002\000" +
    "\020\002\uffff\014\uffff\015\uffff\017\uffff\021\uffff\022\uffff" +
    "\031\uffff\001\002\000\004\012\047\001\002\000\004\012" +
    "\013\001\002\000\012\012\020\027\015\030\016\031\014" +
    "\001\002\000\026\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\013\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\001\002" +
    "\000\026\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\013" +
    "\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\001\002\000\026" +
    "\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\013\ufff3\023" +
    "\ufff3\024\ufff3\025\ufff3\026\ufff3\001\002\000\024\005\022" +
    "\006\023\007\027\010\030\013\043\023\026\024\032\025" +
    "\025\026\024\001\002\000\012\012\020\027\015\030\016" +
    "\031\014\001\002\000\024\005\022\006\023\007\027\010" +
    "\030\013\031\023\026\024\032\025\025\026\024\001\002" +
    "\000\012\012\020\027\015\030\016\031\014\001\002\000" +
    "\012\012\020\027\015\030\016\031\014\001\002\000\012" +
    "\012\020\027\015\030\016\031\014\001\002\000\012\012" +
    "\020\027\015\030\016\031\014\001\002\000\012\012\020" +
    "\027\015\030\016\031\014\001\002\000\012\012\020\027" +
    "\015\030\016\031\014\001\002\000\012\012\020\027\015" +
    "\030\016\031\014\001\002\000\026\004\ufff5\005\ufff5\006" +
    "\ufff5\007\ufff5\010\ufff5\013\ufff5\023\ufff5\024\ufff5\025\ufff5" +
    "\026\ufff5\001\002\000\012\012\020\027\015\030\016\031" +
    "\014\001\002\000\026\004\ufff0\005\ufff0\006\ufff0\007\ufff0" +
    "\010\ufff0\013\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\001" +
    "\002\000\026\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6" +
    "\013\ufff6\023\026\024\032\025\025\026\024\001\002\000" +
    "\026\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\013\ufff7" +
    "\023\026\024\032\025\025\026\024\001\002\000\026\004" +
    "\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\013\ufff1\023\ufff1" +
    "\024\ufff1\025\ufff1\026\ufff1\001\002\000\026\004\uffef\005" +
    "\uffef\006\uffef\007\uffef\010\uffef\013\uffef\023\uffef\024\uffef" +
    "\025\uffef\026\uffef\001\002\000\026\004\uffee\005\uffee\006" +
    "\uffee\007\uffee\010\uffee\013\uffee\023\uffee\024\uffee\025\uffee" +
    "\026\uffee\001\002\000\026\004\ufff8\005\ufff8\006\ufff8\007" +
    "\027\010\030\013\ufff8\023\026\024\032\025\025\026\024" +
    "\001\002\000\026\004\ufff9\005\ufff9\006\ufff9\007\027\010" +
    "\030\013\ufff9\023\026\024\032\025\025\026\024\001\002" +
    "\000\014\014\007\017\012\021\011\022\005\031\004\001" +
    "\002\000\004\020\045\001\002\000\014\014\007\017\012" +
    "\021\011\022\005\031\004\001\002\000\022\002\ufffd\014" +
    "\ufffd\015\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\031\ufffd" +
    "\001\002\000\012\012\020\027\015\030\016\031\014\001" +
    "\002\000\024\005\022\006\023\007\027\010\030\013\051" +
    "\023\026\024\032\025\025\026\024\001\002\000\014\014" +
    "\007\017\012\021\011\022\005\031\004\001\002\000\022" +
    "\002\ufffc\014\ufffc\015\ufffc\017\ufffc\020\ufffc\021\ufffc\022" +
    "\ufffc\031\ufffc\001\002\000\016\014\007\015\055\017\012" +
    "\021\011\022\005\031\004\001\002\000\020\002\001\014" +
    "\001\015\001\017\001\021\001\022\001\031\001\001\002" +
    "\000\022\002\ufffa\014\ufffa\015\ufffa\017\ufffa\020\ufffa\021" +
    "\ufffa\022\ufffa\031\ufffa\001\002\000\004\002\000\001\002" +
    "\000\024\004\060\005\022\006\023\007\027\010\030\023" +
    "\026\024\032\025\025\026\024\001\002\000\022\002\ufffb" +
    "\014\ufffb\015\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\031" +
    "\ufffb\001\002\000\012\012\020\027\015\030\016\031\014" +
    "\001\002\000\024\004\063\005\022\006\023\007\027\010" +
    "\030\023\026\024\032\025\025\026\024\001\002\000\022" +
    "\002\ufffe\014\ufffe\015\ufffe\017\ufffe\020\ufffe\021\ufffe\022" +
    "\ufffe\031\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\061\000\006\002\005\003\007\001\001\000\002\001" +
    "\001\000\004\004\056\001\001\000\004\003\053\001\001" +
    "\000\006\002\052\003\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\020\001\001\000\002\001\001" +
    "\000\004\004\041\001\001\000\004\004\040\001\001\000" +
    "\004\004\037\001\001\000\004\004\036\001\001\000\004" +
    "\004\035\001\001\000\004\004\034\001\001\000\004\004" +
    "\033\001\001\000\002\001\001\000\004\004\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\043\001\001\000" +
    "\002\001\001\000\004\003\045\001\001\000\002\001\001" +
    "\000\004\004\047\001\001\000\002\001\001\000\004\003" +
    "\051\001\001\000\002\001\001\000\004\003\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\061\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    // Connect the parser to the scanner
    Scanner s;
    Parser(Scanner s) { this.s = s; }

    // Symbol table
    Map<String, Number> simbolos = new HashMap<>();

    private boolean isNumeric(String str) {
        try {
            Double.parseDouble(str);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= programa comando 
            {
              SyntaxTreeNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SyntaxTreeNode p = (SyntaxTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SyntaxTreeNode c = (SyntaxTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              RESULT = new SyntaxTreeNode("Programa");
              RESULT.addChild(p);
              RESULT.addChild(c);
              RESULT.execute(simbolos); // Executa o programa
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SyntaxTreeNode start_val = (SyntaxTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= comando 
            {
              SyntaxTreeNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SyntaxTreeNode c = (SyntaxTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              RESULT = new SyntaxTreeNode("Programa");
              RESULT.addChild(c);
              RESULT.execute(simbolos); // Executa o comando
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // comando ::= ID ATRIB expressao SEMI 
            {
              SyntaxTreeNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SyntaxTreeNode e = (SyntaxTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
              RESULT = new SyntaxTreeNode("Atribuicao");
              RESULT.addChild(new SyntaxTreeNode(i));
              RESULT.addChild(e);
              simbolos.put(i, e != null && isNumeric(e.getName()) ? Double.valueOf(e.getName()) : 0);
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // comando ::= IF LPAREN expressao RPAREN comando ELSE comando 
            {
              SyntaxTreeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SyntaxTreeNode e = (SyntaxTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SyntaxTreeNode c1 = (SyntaxTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SyntaxTreeNode c2 = (SyntaxTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              RESULT = new SyntaxTreeNode("If-Else");
              RESULT.addChild(e);
              RESULT.addChild(c1);
              RESULT.addChild(c2);
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // comando ::= WHILE LPAREN expressao RPAREN comando 
            {
              SyntaxTreeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SyntaxTreeNode e = (SyntaxTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SyntaxTreeNode c = (SyntaxTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              RESULT = new SyntaxTreeNode("While");
              RESULT.addChild(e);
              RESULT.addChild(c);
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // comando ::= RETURN expressao SEMI 
            {
              SyntaxTreeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SyntaxTreeNode e = (SyntaxTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
              RESULT = new SyntaxTreeNode("Return");
              RESULT.addChild(e);
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // comando ::= LCURLY programa RCURLY 
            {
              SyntaxTreeNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SyntaxTreeNode p = (SyntaxTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
              RESULT = new SyntaxTreeNode("Bloco");
              RESULT.addChild(p);
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expressao ::= expressao MAIS expressao 
            {
              SyntaxTreeNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SyntaxTreeNode e1 = (SyntaxTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SyntaxTreeNode e2 = (SyntaxTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  RESULT = new SyntaxTreeNode("+");
                  RESULT.addChild(e1);
                  RESULT.addChild(e2);
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expressao ::= expressao MENOS expressao 
            {
              SyntaxTreeNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SyntaxTreeNode e1 = (SyntaxTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SyntaxTreeNode e2 = (SyntaxTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  RESULT = new SyntaxTreeNode("-");
                  RESULT.addChild(e1);
                  RESULT.addChild(e2);
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expressao ::= expressao VEZES expressao 
            {
              SyntaxTreeNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SyntaxTreeNode e1 = (SyntaxTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SyntaxTreeNode e2 = (SyntaxTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  RESULT = new SyntaxTreeNode("*");
                  RESULT.addChild(e1);
                  RESULT.addChild(e2);
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expressao ::= expressao DIV expressao 
            {
              SyntaxTreeNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SyntaxTreeNode e1 = (SyntaxTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SyntaxTreeNode e2 = (SyntaxTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  RESULT = new SyntaxTreeNode("/");
                  RESULT.addChild(e1);
                  RESULT.addChild(e2);
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expressao ::= LPAREN expressao RPAREN 
            {
              SyntaxTreeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SyntaxTreeNode e = (SyntaxTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                  RESULT = new SyntaxTreeNode("()");
                  RESULT.addChild(e);
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expressao ::= NUMERO 
            {
              SyntaxTreeNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  RESULT = new SyntaxTreeNode(n.toString());
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expressao ::= PONTO_FLUTUANTE 
            {
              SyntaxTreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  RESULT = new SyntaxTreeNode(f.toString());
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expressao ::= ID 
            {
              SyntaxTreeNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  RESULT = new SyntaxTreeNode(i);
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expressao ::= expressao IGUAL_IGUAL expressao 
            {
              SyntaxTreeNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SyntaxTreeNode e1 = (SyntaxTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SyntaxTreeNode e2 = (SyntaxTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  RESULT = new SyntaxTreeNode("==");
                  RESULT.addChild(e1);
                  RESULT.addChild(e2);
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expressao ::= expressao DIFERENTE expressao 
            {
              SyntaxTreeNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SyntaxTreeNode e1 = (SyntaxTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SyntaxTreeNode e2 = (SyntaxTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  RESULT = new SyntaxTreeNode("!=");
                  RESULT.addChild(e1);
                  RESULT.addChild(e2);
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expressao ::= expressao MENOR expressao 
            {
              SyntaxTreeNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SyntaxTreeNode e1 = (SyntaxTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SyntaxTreeNode e2 = (SyntaxTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  RESULT = new SyntaxTreeNode("<");
                  RESULT.addChild(e1);
                  RESULT.addChild(e2);
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expressao ::= expressao MAIOR expressao 
            {
              SyntaxTreeNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SyntaxTreeNode e1 = (SyntaxTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SyntaxTreeNode e2 = (SyntaxTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  RESULT = new SyntaxTreeNode(">");
                  RESULT.addChild(e1);
                  RESULT.addChild(e2);
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
